//Written by: Jason Clark
//© 2015 DigiPen, All Rights Reserved.
/////////////////////////////////////////
////                                 ////
////  Name: LungeAndHeadbutt.z       ////
////    Written by: Jason Clark      ////
////                                 ////
////     Last Updated: 12-11-14      ////
////                                 ////
/////////////////////////////////////////
class LungeAndHeadbutt : ZilchComponent
{
    //DEPENDENCIES
    [Dependency]
    var Orientation : Orientation = null;
    
    [Property]
    var TargetObjectPath:CogPath = null;
    [Property]
    var MaxAttacks:Integer = 1;
    [Property]
    var AttackTimeout:Real = 300.0; //miliseconds
    
    
    var OriginalPosition:Real3 = Real3();
    var MushroomRotation:Quaternion = Quaternion();
    var AttackTimer:Real = 0.0;
    
    var TargetObject:Cog = null;
    var TargetDirection:Real3 = Real3();
    var TargetDistance:Real = Real();
    
    //LUNGE PROPERTIES
    [Property]
    var LungeSpeed:Real = 10.0;
    //non-settable properties
    var LungeDistance:Real = Real();
    
    //HEADBUTT PROPERTIES
    [Property]
    var HeadbuttAttackPercentage:Real = 0.5;
    [Property]
    var JumpHeight:Real = 6.0;
    [Property]
    var JumpTime:Real = 0.5;
    [Property]
    var HangTime:Real = 1.0;
    [Property]
    var CrashDownTime:Real = 0.25;
    //non-settable properies
    var UpsideDownRotation:Quaternion = Quaternion();
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
        
        this.OriginalPosition = this.Owner.Transform.Translation;
    }
    
    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-OnCollisionStarted
    //EXPLANATION-Initialize variables/functions so that we can use them
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function OnCollisionStarted(event:CollisionEvent)
    {
        //DEBUG
        //Console.WriteLine(event.OtherObject.Parent.Parent);
        if(event.OtherObject.Parent == this.TargetObject)
        {
            //send damage event to player
            //***SEND DAMAGE TO PLAYER event.OtherObject.Health.ApplyDamage(SOME AMOUNT OF DAMAGE);
            //destroy self
            event.Object.Destroy();
        }
    }
    

    function OnLogicUpdate(event : UpdateEvent)
    {
    }
    
    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-ChooseAttackType
    //EXPLANATION-Chooses between lunging attacks and headbutt attacks
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function ChooseAttackType(event:UpdateEvent):Void
    {
        //pick a number between 0.0 and 1.0
        var random:Real = Random().Range(0.0, 1.0);
        
        //if random is less than or equal to the percentage chance of the HeadbuttAttackPercentage
        if(random <= this.HeadbuttAttackPercentage)
        {
            //DEBUG
            //Console.WriteLine("Headbutt!");
            this.Headbutt(event);
        }
        
        //the rest of the attacks are normal lunges
        else
        {
            //DEBUG
            //Console.WriteLine("Lunging!");
            this.Lunge(event);
        }
    }
    
    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-Lunge
    //EXPLANATION-applies a short term velocity on the enemy towards the target
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function Lunge(event:UpdateEvent):Void
    {
        //apply velocity on enemy towards target
        this.Owner.RigidBody.Velocity = -this.TargetDirection * this.LungeSpeed;
        
        //var lungeDisplacement:Real3 = this.Owner.Transform.Translation + this.OriginalPosition;
        //this.LungeDistance = Math.Length(lungeDisplacement);
    }
    
    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-Headbutt
    //EXPLANATION-applies a jump on the enemy, rotates in air, falls down on target
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function Headbutt(event:UpdateEvent):Void
    {
        //store rotation
        this.UpsideDownRotation = this.Owner.Orientation.GetLookAtDirectionWithUpRotation(this.TargetDirection, Real3(0,0,1));
        
        //create an action sequence for headbutting
        var aHeadbuttSequence = Action.Sequence(this.Owner.Actions);
        
        //apply velocity on enemy towards target
        Action.Property(aHeadbuttSequence,
                        @this.Owner.Transform.Translation,
                        (this.TargetObject.Transform.Translation + Real3(0,0,this.JumpHeight)),
                        this.JumpTime,
                        Ease.QuadOut);
        //rotate upside-down?
        Action.Property(aHeadbuttSequence,
                        @this.Owner.Transform.Rotation,
                        Math.Slerp(this.Owner.Transform.Rotation, this.MushroomRotation, 180),
                        this.HangTime,
                        Ease.QuadInOut);
        //crash down!
        Action.Property(aHeadbuttSequence,
                        @this.Owner.Transform.Translation,
                        (this.TargetObject.Transform.Translation),
                        this.CrashDownTime,
                        Ease.QuadOut);
        //particles on
        Action.Property(aHeadbuttSequence,
                        @this.Owner.FindChildByName("mushroom-crash-particle-system").BoxParticleEmitter.Active,
                        true,
                        0.5,
                        Ease.QuadOut);
        //particles off
        Action.Property(aHeadbuttSequence,
                        @this.Owner.FindChildByName("mushroom-crash-particle-system").BoxParticleEmitter.Active,
                        false,
                        0.25,
                        Ease.QuadOut);
    }
}
