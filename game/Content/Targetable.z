/////////////////////////////////////////
////                                 ////
////  Name: Targetable.z             ////
////    Written by: Eric Gleiser     ////
////                                 ////
////     Last Updated: 12-11-14      ////
////                                 ////
/////////////////////////////////////////
enum TargetType{Standard, Friendly, Enemy, Information}
class Targetable : ZilchComponent
{
    [Property]
    var IndicatorType:TargetType = TargetType.Standard;
    [Property]
    var IndicatorOffset:Real3 = Real3(0,0,0);
    [Property]
    var Range:Real = 30.0;
    var Player:Cog = null;
    var BGMManager:Cog = null;
    var HUDTargeting:Cog = null;
    var MyBlip:Cog = null;
    var HUDSpace:Space = null;
    var AddedToEnemyArray: Boolean = false;
    var PlayerDistance:Real = 0.0;
    
    function Initialize(init : CogInitializer)
    {
        this.Player = this.LevelSettings.CameraViewport.Camera.OrbitCameraController.OrbitTarget.Cog;
        this.Player.PlayerController.TargetList.Add(this.Owner);
        this.HUDSpace = this.LevelSettings.HudCreator.HudSpace;
        this.HUDTargeting = this.HUDSpace.FindObjectByName("TargetingSystem");
        this.BGMManager = this.LevelSettings.FindChildByName("BGMManager");
        
        //Create Targeting Blip
        this.MyBlip = this.HUDSpace.CreateAtPosition(Archetype.Find("TargetBlip"), Real3(0,0,1000));
        this.MyBlip.BlipLinker.BlipTarget = this.Owner;
        this.HUDTargeting.HUDTargeting.BlipList.Add(this.MyBlip);
        
        
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.Death, this.OnDeath);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        if(this.IndicatorType == TargetType.Enemy)
        {
            if(this.BGMManager != null && this.BGMManager.DungeonSoundManager != null)
            {
                if(this.GetDistanceToPlayer() < this.Range)
                {
                    if(this.AddedToEnemyArray == false)
                    {
                        this.AddedToEnemyArray = true;
                        this.BGMManager.DungeonSoundManager.EnemyList.Push(this.Owner);
                    }
                }
                else
                {
                    if(this.AddedToEnemyArray == true)
                    {
                        this.AddedToEnemyArray = false;
                        var indexToRemove = this.BGMManager.DungeonSoundManager.EnemyList.FindFirstIndex(this.Owner);
                        this.BGMManager.DungeonSoundManager.EnemyList.RemoveAt(indexToRemove);
                    }
                }
            }
        }
    }
    function OnDeath(event : Event)
    {
        this.CleanUp();
    }
    function CleanUp()
    {
        var indexToRemove = this.Player.PlayerController.TargetList.FindFirstIndex(this.Owner);
        if(indexToRemove >= 0)
        {
            this.Player.PlayerController.TargetList.RemoveAt(indexToRemove);
        }
        if(this.AddedToEnemyArray == true && indexToRemove >= 0)
        {
            //Console.WriteLine("Killed");
            indexToRemove = this.BGMManager.DungeonSoundManager.EnemyList.FindFirstIndex(this.Owner);
            this.BGMManager.DungeonSoundManager.EnemyList.RemoveAt(indexToRemove);
        }
    }
    function GetDistanceToPlayer():Real
    {
        this.PlayerDistance = Math.Length(this.Player.Transform.Translation - this.Owner.Transform.WorldTranslation);
        return this.PlayerDistance;
    }
}
