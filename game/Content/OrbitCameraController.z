/////////////////////////////////////////
////                                 ////
////  Name: OrbitCameraController.z  ////
////    Written by: Jason Clark      ////
////                and Eric Gleiser ////
////     Last Updated: 9-17-14       ////
////                                 ////
/////////////////////////////////////////
class OrbitCameraController : ZilchComponent
{
    //The target for the camera to follow
    [Property]
    var OrbitTarget : CogPath = null;
    
    //The height of the camera, relative to the target
    [Property]
    var Height: Real = 30.0;
    
    [Property]
    var Radius : Real = 20.0;
    
    [Property]
    var AngleChange : Real = 90.0;
    
    [Property]
    var AngleOrigin : Real = 0.0;
    
    [Property]
    var CamLerp: Real3 = Real3(0,0,30);
    
    var FadeOutCog : Cog = null;
    
    var WantedcamLerp : Real3 = Real3(0,0,10);
    
    var PanStartRotation : Quaternion = Quaternion(0,0,0,0);
    var PanTimer : Real = 1.1;
    var PanTargetRotation : Quaternion = Quaternion(0,0,0,0);
    var PanFinished : Boolean = false;
    
    var ZoomTowardsObject : Cog = null;
    
    var DefaultPosition : Real3 = Real3(0,0,0);
    
    var CinematicEventOn : Boolean = false;
    
    var ShouldUpdateCamera : Boolean = true;
        
    var FlipCam : Boolean = false;
    
    var Direction : Real3 = Real3(0,0,0);
    var CurrentAngle : Real = 0;
    
    var WantedRotation : Quaternion = Quaternion(0,0,0,0);
    var WantedPosition : Real3 = Real3(0,0,0);
    
    function Initialize(init : CogInitializer)
    {
        this.Direction = Math.Normalize(this.Owner.Transform.Translation - this.OrbitTarget.Cog.Transform.Translation);
        
        this.Owner.Transform.Rotation = Math.Euler(Real3(Math.ToRadians(210.0), Math.ToRadians(180.0), 33.0));
        
        this.CurrentAngle = Math.ToRadians(270);
        this.Owner.Transform.WorldTranslation = Real3( Math.Cos(this.CurrentAngle) * this.Radius,
         Math.Sin(this.CurrentAngle) * this.Radius, 0.0) + this.OrbitTarget.Cog.Transform.Translation;
        
        
        this.Owner.Camera.Size = this.CamLerp.Z ;
        this.Owner.Orientation.LookAtDirectionWithUp(this.Direction, Real3(0,0,1));
        this.WantedRotation = this.Owner.Orientation.Rotation;
            

        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, "zoomEvent", this.OnZoom);
        Zero.Connect(this.Owner, "panEvent", this.OnPan);
        Zero.Connect(this.Owner, "dollyEvent", this.OnDolly);
        Zero.Connect(this.Owner, "cameraLockEvent", this.OnToggleCameraLock);
        Zero.Connect(this.Owner, "fadeEvent", this.OnFade);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        this.Direction = Math.Normalize(this.Owner.Transform.Translation - this.OrbitTarget.Cog.Transform.Translation);
        this.UpdatePlayerInput();
        
        if(this.ShouldUpdateCamera)
        {
            if(this.FlipCam)
            {
                //this.WantedRotation = Math.Euler(Real3(Math.ToRadians(210.0), Math.ToRadians(180.0), 0.0));
                //this.Owner.Orientation.GetLookAtDirectionWithUpRotation(this.Direction, Real3(0,0,1))
                this.WantedRotation = this.Owner.Orientation.GetLookAtDirectionWithUpRotation(this.Direction, Real3(0,0,1));
                
                this.CurrentAngle = Math.Lerp(this.CurrentAngle, Math.ToRadians(this.AngleChange), event.Dt * 3);
                this.WantedPosition = Real3( Math.Cos(this.CurrentAngle) * this.Radius, Math.Sin(this.CurrentAngle) * this.Radius, this.Height) + this.OrbitTarget.Cog.Transform.Translation;
                
                //this.Owner.Transform.Rotation = this.WantedRotation;
                this.Owner.Transform.Rotation = Math.RotateTowards(this.Owner.Transform.Rotation, this.WantedRotation, 1);    
                this.Owner.Transform.Translation = Math.Lerp(this.Owner.Transform.Translation, this.WantedPosition, event.Dt * 5);
                

            }
            else
            {
                //this.WantedRotation = Math.Euler(Real3(Math.ToRadians(30.0), 0.0, 0.0));
                //this.Owner.Orientation.GetLookAtDirectionWithUpRotation(this.Direction, Real3(0,0,1))
                this.WantedRotation = this.Owner.Orientation.GetLookAtDirectionWithUpRotation(this.Direction, Real3(0,0,1));
                
                this.CurrentAngle = Math.Lerp(this.CurrentAngle, Math.ToRadians(270), event.Dt * 3);
                this.WantedPosition = Real3( Math.Cos(this.CurrentAngle) * this.Radius, Math.Sin(this.CurrentAngle) * this.Radius, this.Height) + this.OrbitTarget.Cog.Transform.Translation;
                
                //this.Owner.Transform.Rotation = this.WantedRotation;
                this.Owner.Transform.Rotation = Math.RotateTowards(this.Owner.Transform.Rotation, this.WantedRotation, 5);
                this.Owner.Transform.Translation = Math.Lerp(this.Owner.Transform.Translation, this.WantedPosition, event.Dt * 5);
            }
        }
    }
    
    function UpdatePlayerInput()
    {
        if(Zero.Keyboard.KeyIsPressed(Keys.Control) || this.Space.FindObjectByName("Player").InputController.Gamepad.IsButtonPressed(Buttons.RightShoulder))
        {
            this.ToggleFlipCam();
            //throw(new Exception("FlipCam not at Sleep point"));
        }
    }
    
    function ToggleFlipCam()
    {
        this.FlipCam = !this.FlipCam;
    }
    
    function OnZoom(event : CameraZoomEvent)
    {
        //Checking the boolean to check if there is another object that the camera should zoom towards.
        if(event.CameraTarget == null)
        {
            //If wanting to zoom in/out based on the player's position
            if(event.IsZoomingIn)
            {
                Console.WriteLine("Normal Zoom In To Player");
                //Creating and defining the variable to for the action sequence
                var seq = Action.Sequence(this.Owner.Actions);
                //Setting the variables for the Action property based on the values defined
                //when creating a new zoom event. (See the CameraZoomEvent class in the
                //CustomEvents Zilch script)
                Action.Property(seq, @this.Owner.Camera.Size, event.CamSize, event.ZoomTime, event.EaseCurve);
            }
            //If wanting to zoom back out to regular size (set at CamLerp.z, which is 30 right now)
            else
            {
                //Creating and defining the variable to for the action sequence
                var seq = Action.Sequence(this.Owner.Actions);
                //Setting the variables for the Action property based on the values defined
                //when creating a new zoom event. (See the CameraZoomEvent class in the
                //CustomEvents Zilch script)
                Action.Property(seq, @this.Owner.Camera.Size, this.CamLerp.Z, event.ZoomTime, event.EaseCurve);
            }
        }
        //If there is ANOTHER OBJECT you want to zoom in on besides the player
        else
        {
            if(event.IsZoomingIn)
            {
                //Variable for the object to zoom towards
                this.ZoomTowardsObject = event.CameraTarget;
                
                Console.WriteLine("Zoom Object = `this.ZoomTowardsObject`");
                
                //Vector of the camera towards the object
                var cameraObjectVector : Real3 = Real3(0,0,0);
                //The rotation quaternion for the camera based on the object's position
                var rotationDirection : Quaternion = Quaternion(0,0,0,0);
                //Defining the vector between the camera and the object
                cameraObjectVector = Math.Normalize(this.ZoomTowardsObject.Transform.Translation - this.Owner.Transform.Translation);
                //Defining the rotation quaternion based on the object's position
                rotationDirection = this.Owner.Orientation.GetLookAtDirectionWithUpRotation(cameraObjectVector, Real3(0,0,1));
                
                var grp = Action.Group(this.Owner.Actions);
                Action.Property(grp,
                                @this.Owner.Camera.Size,
                                event.CamSize,
                                event.ZoomTime,
                                event.EaseCurve);
                Action.Call(grp, this.ActionCallPanEvent);
            }
            //If wanting to zoom back out to regular size (set at CamLerp.z, which is 30 right now)
            else
            {
                var grp = Action.Group(this.Owner.Actions);
                Action.Property(grp,
                                @this.Owner.Camera.Size,
                                this.CamLerp.Z,
                                event.ZoomTime,
                                event.EaseCurve);
            }
        }
    }
    
    function OnPan(event : CameraPanEvent)
    {
        //If wanting to pan awwy from the player
        if(event.IsActive)
        {
            this.ShouldUpdateCamera = false;
            
            if(event.PanTarget != null)
            {
                Console.WriteLine("Targeted Pan");
                this.PanStartRotation = this.Owner.Transform.Rotation;
                // Variable for the new direction vector based on CameraTarget
                var targetDirection : Real3 = Real3(0,0,0);
                //Grabbing the target object.
                var panTarget : Cog = event.PanTarget;
                //Defining the direction vector
                targetDirection = Math.Normalize(this.Owner.Transform.Translation - panTarget.Transform.Translation);
                this.PanTargetRotation = this.Owner.Orientation.GetLookAtDirectionWithUpRotation(targetDirection, Real3(0,0,1));
                var seq = Action.Sequence(this.Owner.Actions);
                Action.Property(seq,
                                @this.Owner.Transform.Rotation,
                                this.PanTargetRotation,
                                event.PanTime,
                                event.EasingCurve);
            }
            else
            {
                Console.WriteLine("Non-Targeted Pan");
                var seq = Action.Sequence(this.Owner.Actions);
                Action.Property(seq,
                                @this.Owner.Transform.Rotation,
                                event.EndRotation,
                                event.PanTime,
                                event.EasingCurve);
            }
        }
        else
        {
            if(event.PanTarget != null)
            {
                Console.WriteLine("Targeted Pan Ending");
                var seq = Action.Sequence(this.Owner.Actions);
                Action.Property(seq,
                                @this.Owner.Transform.Rotation,
                                this.PanStartRotation,
                                event.PanTime,
                                event.EasingCurve);
                Action.Call(seq, this.UpdateCamera);
            }
            else
            {
                Console.WriteLine("Non-Targeted Pan Ending");
                var seq = Action.Sequence(this.Owner.Actions);
                Action.Property(seq,
                                @this.Owner.Transform.Rotation,
                                this.PanStartRotation,
                                event.PanTime,
                                event.EasingCurve);
                Action.Call(seq, this.UpdateCamera);
            }
        }
    }
    
    function OnDolly(event : CameraDollyEvent)
    {
        //Grabs the position of the camera before dollying so that it can be used when dollying back to original position
        
            
        //If wanting to change translation of camera
        if(event.IsActive)
        {
            //If dollying to the same position twice in a row without dollying back, this position will screw up
            //the return dolly because the second default position is not actually the Default position.
            this.DefaultPosition = this.Owner.Transform.Translation;
            Console.WriteLine("Dolly Event Started");
            if(event.DollyTarget != null)
            {
                //Making a variable for the DollyTarget object
                var dollyTarget : Cog = event.DollyTarget;
                
                /*****@IMPORTANT: CHOOSING THIS OPTION MEANS THE PLAYER WILL STILL BE THE 
                FOCUS OF THE CAMERA UNTIL THE DOLLY IS COMPLETE*********/
                if(event.TargetFocus)
                {
                    //Action interpolating between original camera translation and translation of the target object
                    var seq = Action.Sequence(this.Owner.Actions);
                    Action.Property(seq,
                                    @this.Owner.Transform.Translation,
                                    dollyTarget.Transform.Translation,
                                    event.DollyTime,
                                    event.EasingCurve);
                    //Calls the function that disables the camera from updating according to player
                    
                    Action.Call(seq, this.CameraLock);
                }
                /******@IMPORTANT: CHOOSING THIS WILL NOT CHANGE THE ROTATION OF THE
                CAMERA AT ALL; IT WILL ONLY CHANGE ITS TRANSLATION********/
                else
                {
                    var seq2 = Action.Sequence(this.Owner.Actions);
                    Action.Call(seq2, this.CameraLock);
                    Action.Property(seq2,
                                    @this.Owner.Transform.Translation,
                                    dollyTarget.Transform.Translation,
                                    event.DollyTime,
                                    event.EasingCurve);
                }
            }
            else
            {
                //Action interpolating between original camera translation and EndPosition as defined when dispatching event
                var seq = Action.Sequence(this.Owner.Actions);
                Action.Property(seq,
                                @this.Owner.Transform.Translation,
                                event.EndPosition,
                                event.DollyTime,
                                event.EasingCurve);
                //Calls the function that will now allow the camera to update according to the player again
                Action.Call(seq, this.CameraLock);
            }
            //Calls the ToggleCameraLock function so that the camera locks and will not update according to player movement
            
        }
        //For returning to original translation before dolly occurs
        else
        {
            Console.WriteLine("Dolly Event Ending");
            //Action interpolating between former Endposition and original translation behind player
            var seq = Action.Sequence(this.Owner.Actions);
            //Calls the ToggleCameraLock function so that the camera unlocks and updates according to player movement again
            Action.Call(seq, this.CameraUnlock);
            //Action interpolating BACK to where camera was positioned before dolly.
            Action.Property(seq, @this.Owner.Transform.Translation, this.DefaultPosition, event.DollyTime, event.EasingCurve);
        }
    }
    
    function OnFade (event : FadeToBlackEvent)
    {
        var levelSettings = this.Space.LevelSettings;
        var hudSpace = levelSettings.HudCreator.HudSpace;
        this.FadeOutCog = hudSpace.FindObjectByName("FadeToBlackSprite");
        if(event.IsFadeIn)
        {
            var seq = Action.Sequence(this.Owner.Actions);
            Action.Property(seq,
                            @this.FadeOutCog.Sprite.Color,
                            Real4(0,0,0,0),
                            event.TimeToFade,
                            event.EaseCurve);
            Action.Property(seq,
                            @this.FadeOutCog.Sprite.Visible,
                            false,
                            0.01,
                            Ease.Linear);
        }
        else
        {
            var seq = Action.Sequence(this.Owner.Actions);
            Action.Property(seq,
                            @this.FadeOutCog.Sprite.Visible,
                            true,
                            0.01,
                            Ease.Linear);
            Action.Property(seq,
                            @this.FadeOutCog.Sprite.Color,
                            Real4(0,0,0,1),
                            event.TimeToFade,
                            event.EaseCurve);
        }
            
    }
    
    function CameraLock()
    {
        var cameraLockEvent = new CameraLockEvent();
        cameraLockEvent.IsLocked = false;
        this.Owner.DispatchEvent("cameraLockEvent", cameraLockEvent);
    }
    
    function CameraUnlock()
    {
        var cameraLockEvent = new CameraLockEvent();
        cameraLockEvent.IsLocked = true;
        this.Owner.DispatchEvent("cameraLockEvent", cameraLockEvent);
    }
    
    function OnToggleCameraLock(event : CameraLockEvent)
    {
        this.ShouldUpdateCamera = event.IsLocked;
    }
    
    function ActionCallPanEvent()
    {
        var panEvent = new CameraPanEvent();
        panEvent.IsActive = true;
        panEvent.PanTarget = this.ZoomTowardsObject;
        panEvent.PanTime = 1.5;
        panEvent.EasingCurve = Ease.QuadInOut;
        this.Owner.DispatchEvent("panEvent", panEvent);
    }
    
    function UpdateCamera()
    {
        this.ShouldUpdateCamera = true;
    }
}
