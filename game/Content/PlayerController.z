class PlayerController : ZilchComponent
{
    [Dependency]
    var Orientation: Orientation = null;
    
    [Dependency]
    var Transform: Transform = null;
    
    [Property]
    var MovmentSpeed:Real = 10.0;
    
    [Property]
    var RotateSpeed:Real = 25.0;
    
    [Property]
    var MaxMoveForce:Real = 10.0;
    
    [Property]
    var Deceleration:Real = 1.5;
    [Property]
    
    var CameraPath:CogPath = null;
    var Camera:Cog = null;
    
    var IsPanning : Boolean = false;
    var IsReturnPanning : Boolean = false;
    
    function Initialize(init : CogInitializer)
    {
        this.Owner.DynamicMotor.MaxMoveForce = this.MaxMoveForce;
        this.Camera = this.CameraPath.Cog;
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Space, "panFinishedEvent", this.OnPanFinished);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        this.MovementUpdate(event);
        this.AttackUpdate(event);
        this.Zoom(event);
        this.Pan(event);
        this.Dolly(event);
    }
    function AttackUpdate(event : UpdateEvent)
    {
        if(this.Owner.InputController.Gamepad.IsButtonPressed(Buttons.A) || Zero.Keyboard.KeyIsPressed(Keys.Space))
        {
            var attackEvent = new AttackEvent();
            this.Owner.DispatchDown("attackEvent", attackEvent);
            this.Owner.DynamicMotor.MoveInDirection(this.Orientation.WorldForward * event.Dt * this.MovmentSpeed * 1000, this.Orientation.WorldUp);
        }
    }
    function MovementUpdate(event : UpdateEvent)
    {
        if(this.Owner.InputController.GetMovement() != Real3(0,0,0))
        {
            var cameraAngle= this.Camera.OrbitCameraController.CurrentAngle;
            var radians:Real = 0.0;
            radians = Math.ATan2(this.Owner.InputController.GetMovement().X,this.Owner.InputController.GetMovement().Y) + cameraAngle + 1.57079633;
            this.Owner.Transform.Rotation = Math.Slerp(this.Owner.Transform.Rotation,Math.Euler(Real3(0.0,0.0,radians)),event.Dt*this.RotateSpeed);
            this.Owner.FootstepDetector.Walk();
            this.Owner.DynamicMotor.MoveInDirection(this.Orientation.WorldForward * event.Dt * this.MovmentSpeed, this.Orientation.WorldUp);
        }
        else
        {
            this.Owner.DynamicMotor.MoveInDirection(Real3(0,0,0), this.Orientation.WorldUp);
            this.Owner.RigidBody.Velocity /= Real3(this.Deceleration,this.Deceleration,1);
        }
    }
    function Zoom(event : UpdateEvent)
    {
        if(Zero.Keyboard.KeyIsPressed(Keys.Shift))
        {
            var zoomEvent = new CameraZoomEvent();
            zoomEvent.CamSize = 10.0;
            zoomEvent.ZoomInTime = 2.0;
            zoomEvent.IsZoomingIn = true;
            this.Camera.DispatchEvent("zoomEvent", zoomEvent);
        }
        if(Zero.Keyboard.KeyIsPressed(Keys.Alt))
        {
            var zoomEvent = new CameraZoomEvent();
            zoomEvent.ZoomOutTime = 1.0;
            zoomEvent.IsZoomingIn = false;
            this.Camera.DispatchEvent("zoomEvent", zoomEvent);
        }
    }
    function Pan(event : UpdateEvent)
    {
        if(Zero.Keyboard.KeyIsPressed(Keys.Q))
        {
            this.IsPanning = true;
        }
        if(this.IsPanning)
        {
            var testPanCube = this.Space.FindObjectByName("TestPanCube");
            
            var panEvent = new CameraPanEvent();
            panEvent.CameraTarget = testPanCube;
            panEvent.EndRotation = Math.Euler(Real3(0.4, 0.0, 1.0));
            panEvent.PanTime = 1.0 * event.Dt;
            panEvent.IsActive = true;
            this.Camera.DispatchEvent("panEvent", panEvent);
        }
        if(Zero.Keyboard.KeyIsPressed(Keys.E))
        {
            this.IsReturnPanning = true;
        }
        if(this.IsReturnPanning)
        {
            var panEvent = new CameraPanEvent();
            panEvent.EndRotation = panEvent.StartRotation;
            panEvent.PanTime = 1.0 * event.Dt;
            panEvent.IsActive = false;
            this.Camera.DispatchEvent("panEvent", panEvent);
        }
    }
    function Dolly(event : UpdateEvent)
    {
        if(Zero.Keyboard.KeyIsPressed(Keys.Z))
        {
            //Just an invisible practice cube to test dolly movement
            var practiceCube = this.Space.FindObjectByName("PracticeDollyCube");
            
            var dollyEvent = new CameraDollyEvent();
            dollyEvent.EndPosition = practiceCube.Transform.Translation;
            dollyEvent.DollyTime = 2.0;
            dollyEvent.EasingCurve = Ease.QuadInOut;
            dollyEvent.IsActive = true;
            this.Camera.DispatchEvent("dollyEvent", dollyEvent);
        }
        if(Zero.Keyboard.KeyIsPressed(Keys.C))
        {
            var dollyEvent = new CameraDollyEvent();
            dollyEvent.DollyTime = 1.0;
            dollyEvent.EasingCurve = Ease.QuadInOut;
            dollyEvent.IsActive = false;
            this.Camera.DispatchEvent("dollyEvent", dollyEvent);
        }
    }
    function OnPanFinished(event : PanFinishedEvent)
    {
        this.IsPanning = false;
        this.IsReturnPanning = false;
    }
        
        
}