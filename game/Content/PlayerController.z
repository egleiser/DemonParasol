class PlayerController : ZilchComponent
{
    [Dependency]
    var Orientation: Orientation = null;
    
    [Dependency]
    var Transform: Transform = null;
    
    [Property]
    var MovmentSpeed:Real = 10.0;
    
    [Property]
    var RotateSpeed:Real = 25.0;
    
    [Property]
    var MaxMoveForce:Real = 10.0;
    
    [Property]
    var Deceleration:Real = 1.5;
    [Property]
    var CameraPath:CogPath = null;
    var Camera:Cog = null;
    function Initialize(init : CogInitializer)
    {
        this.Owner.DynamicMotor.MaxMoveForce = this.MaxMoveForce;
        this.Camera = this.CameraPath.Cog;
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        this.MovementUpdate(event);
        this.AttackUpdate(event);
        this.BlockUpdate(event);
    }
    function AttackUpdate(event : UpdateEvent)
    {
        if(this.Owner.InputController.Gamepad.IsButtonPressed(Buttons.X) || Zero.Keyboard.KeyIsPressed(Keys.Space))
        {
            var attackEvent = new AttackEvent();
            this.Owner.DispatchDown("attackEvent", attackEvent);
            this.Owner.DynamicMotor.MoveInDirection(this.Orientation.WorldForward * event.Dt * this.MovmentSpeed * 1000, this.Orientation.WorldUp);
        }
    }
    function BlockUpdate(event : UpdateEvent)
    {
        if(this.Owner.InputController.Gamepad.RightTrigger > 0.5 || Zero.Keyboard.KeyIsPressed(Keys.F))
        {
            var blockEvent = new BlockEvent();
            this.Owner.DispatchDown("blockEvent", blockEvent);
            
        }
    }
    function MovementUpdate(event : UpdateEvent)
    {
        if(this.Owner.InputController.GetMovement() != Real3(0,0,0))
        {
            var cameraAngle= this.Camera.OrbitCameraController.CurrentAngle;
            var radians:Real = 0.0;
            radians = Math.ATan2(this.Owner.InputController.GetMovement().X,this.Owner.InputController.GetMovement().Y) + cameraAngle + 1.57079633;
            this.Owner.Transform.Rotation = Math.Slerp(this.Owner.Transform.Rotation,Math.Euler(Real3(0.0,0.0,radians)),event.Dt*this.RotateSpeed);
            this.Owner.FootstepDetector.Walk();
            this.Owner.DynamicMotor.MoveInDirection(this.Orientation.WorldForward * event.Dt * this.MovmentSpeed, this.Orientation.WorldUp);
        }
        else
        {
            this.Owner.DynamicMotor.MoveInDirection(Real3(0,0,0), this.Orientation.WorldUp);
            //Stablizes the player
            this.Owner.RigidBody.Velocity /= Real3(this.Deceleration,this.Deceleration,1);
        }
    }
}