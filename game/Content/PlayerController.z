/////////////////////////////////////////
////                                 ////
////  Name: PlayerController.z       ////
////    Written by: Eric Gleiser     ////
////                                 ////
////     Last Updated: 12-11-14      ////
////                                 ////
/////////////////////////////////////////
class PlayerController : ZilchComponent
{
    var Active:Boolean = true;
    [Dependency]
    var Orientation: Orientation = null;
    
    [Dependency]
    var Transform: Transform = null;
    
    [Property]
    var MovmentSpeed:Real = 10.0;
    
    [Property]
    var RotateSpeed:Real = 25.0;
    
    [Property]
    var MaxMoveForce:Real = 10.0;
    
    [Property]
    var Deceleration:Real = 1.5;
    [Property]
    var CameraPath:CogPath = null;
    [Property]
    var WindActive:Boolean = true;
    [Property]
    var FreezeMovement:Boolean = false;
    var MoveAngle:Real = 0;
    var Camera:Cog = null;
    
    var ContextButton:Cog = null;
    var ContextInteract:Boolean = false;
    var ContextString:String = "";
    //Tongue
    var TongueFinder:Cog = null;
    
    //Targeting
    var TargetList:Array[Cog] = new Array[Cog]();
    var TargetProximity:Array[Cog] = new Array[Cog]();
    var TargetIndex:Integer = 0;
    var TargetAngle:Real = 0;
    var Target:Cog = null;
    var TargetIndicator:Cog = null;
    var EnterTargetMode:Boolean = false;
    
    //Pick Up Throw Object
    var PickUp:Cog = null;
    function Initialize(init : CogInitializer)
    {
        this.Owner.DynamicMotor.MaxMoveForce = this.MaxMoveForce;
        this.Camera = this.CameraPath.Cog;
        this.ContextButton = this.LevelSettings.HudCreator.HudSpace.FindObjectByName("ContextButton");
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.Death, this.OnDeath);
    }

    function OnDeath(event : Event)
    {
        //this.Space.LevelSettings.Z_WinLoseTrigger.DisplayMessage("YouLose");
        
        //var aDead = Action.Sequence(this.Owner.Actions);
        
        //Action.Delay(aDead, 3.0);
        
        //Action.Call(aDead, this.Space.TimeSpace.TogglePause);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        if(this.Owner.InputController.Gamepad.IsButtonHeld(Buttons.LeftShoulder))
        {
            this.MovmentSpeed = 1500;
        }
        else
        {
            this.MovmentSpeed = 700;
        }
        if(this.GameSession.InEditor == false)
        {
            Zero.Mouse.Cursor = Cursor.Invisible;
        }
        if(this.FreezeMovement == true)
        {
            this.NoMovement(event);
        }
        if(this.Active)
        {
            //if(this.TongueFinder == null)
            //{
                this.MovementUpdate(event);
                this.PickUpUpdate(event);
                //this.AttackUpdate(event);
                this.BlockUpdate(event);
                this.SwitchTargetUpdate(event);
            //}
            //if(this.Owner.FindChildByName(""))
            if(this.Owner.AutoHopper != null && this.ContextButton != null)
            {
                this.TongueUpdate(event);
            }
        }
        this.ZTargetingUpdate(event);
        if(this.ContextButton != null)
        {
            this.ContextUpdate(event);
        }
    }
    function AttackUpdate(event : UpdateEvent)
    {
        if(this.Owner.InputController.Gamepad.IsButtonPressed(Buttons.X) || Zero.Keyboard.KeyIsPressed(Keys.D))
        {
            var attackEvent = new AttackEvent();
            this.Owner.DispatchDown("attackEvent", attackEvent);
            if(this.FreezeMovement == false)
            {
                this.Owner.DynamicMotor.MoveInDirection(this.Orientation.WorldForward * event.Dt * this.MovmentSpeed * 1000, this.Orientation.WorldUp);
            }
        }
    }
    // Used for Picking Up and Throwing Objects
    function PickUpUpdate(event : UpdateEvent)
    {
        if(this.PickUp != null)
        {
            var wantedTranslation:Real3 =
            this.Owner.Transform.WorldTranslation + (this.Orientation.WorldForward * 1) + Real3(0,0,2);
            this.PickUp.Transform.WorldTranslation = Math.Lerp(this.PickUp.Transform.WorldTranslation, wantedTranslation, event.Dt * 35.0);
            this.PickUp.Transform.WorldRotation = this.Owner.Transform.WorldRotation;
            
        }
    }
    function BlockUpdate(event : UpdateEvent)
    {
        if((this.Owner.InputController.Gamepad.RightTrigger > 0.5 || Zero.Keyboard.KeyIsDown(Keys.F)) && this.WindActive)
        {
            var blockEvent = new BlockEvent();
            this.Owner.DispatchDown("blockEvent", blockEvent);
            
        }
    }
    function ZTargetingUpdate(event : UpdateEvent)
    {
        this.TargetIndicator.IndicatorLock.Target = this.Target;
        if(this.Owner.InputController.Gamepad.LeftTrigger > 0.5 || Zero.Keyboard.KeyIsDown(Keys.A))
        {
            if(this.EnterTargetMode == false)
            {
                this.UpdateTargets();
                this.EnterTargetMode = true;
            }
            if(this.TargetProximity.Count > 0)
            {
                this.Target = this.TargetProximity.Get(this.TargetIndex);
            }
        }
        else
        {
            this.Target = null;
            this.TargetIndex = 0;
            this.EnterTargetMode = false;
        }
        
        if(this.Target != null)
        {
            if(this.TongueFinder == null || this.TongueFinder.TongueFinder.PullPlayer == true)
            {
                var targetDistanceVec = this.Target.Transform.WorldTranslation - this.Owner.Transform.WorldTranslation;
                Math.Normalize(targetDistanceVec);
                this.TargetAngle = Math.ATan2(targetDistanceVec.Y,targetDistanceVec.X) - 1.57079633;
                this.MoveAngle = this.TargetAngle;
                this.Owner.Transform.Rotation = Math.Slerp(this.Owner.Transform.Rotation,Math.Euler(Real3(0.0,0.0,this.TargetAngle)),event.Dt*this.RotateSpeed);
            }
        }
    }
    
    function UpdateTargets()
    {
        this.TargetProximity.Clear();
        foreach(var cog in this.TargetList )
        {
            if(cog != null)
            {
                if(cog.Targetable.GetDistanceToPlayer() < cog.Targetable.Range)
                {
                    this.TargetProximity.Add(cog);
                }
            }
        }
        this.TargetProximity.Sort(ObjectSorting.SortTargetByDistance);
        
    }
    
    function SwitchTargetUpdate(event : UpdateEvent)
    {
        this.NextTarget();
    }
    function NextTarget()
    {
        if((this.Owner.InputController.Gamepad.IsButtonPressed(Buttons.Y) || Zero.Keyboard.KeyIsPressed(Keys.S))  && this.TongueFinder == null)
        {
            //Console.WriteLine(this.TargetProximity);
            if(this.TargetIndex < this.TargetProximity.Count-1)
            {
                this.TargetIndex += 1;
            }
            else
            {
                this.TargetIndex = 0;
            }
        }
    }
    function ContextUpdate(event : UpdateEvent)
    {
        if(this.ContextString == "")
        {
            if(this.TongueFinder != null)
            {
                //ContextButton
                if(this.TongueFinder.TongueFinder.Latched == true && this.TongueFinder.TongueFinder.Destroy == true &&
                 this.ContextButton.ContextButtonManager.WantedText != "Yank" && this.TongueFinder.TongueFinder.Grapple == false)
                {
                    this.ContextButton.ContextButtonManager.SetButton("Yank");
                }
                else if(this.TongueFinder.TongueFinder.Latched == true && this.ContextButton.ContextButtonManager.WantedText != "Grapple" &&
                this.TongueFinder.TongueFinder.Destroy == false && this.TongueFinder.TongueFinder.Grapple == true)
                {
                    this.ContextButton.ContextButtonManager.SetButton("Grapple");
                }
                //ContextButton
                else if(this.TongueFinder.TongueFinder.Latched == true && this.ContextButton.ContextButtonManager.WantedText != "Pull" &&
                this.TongueFinder.TongueFinder.Destroy == false && this.TongueFinder.TongueFinder.Grapple == false)
                {
                    this.ContextButton.ContextButtonManager.SetButton("Pull");
                }
            }
            else if(this.ContextButton.ContextButtonManager.WantedText != "Tongue")
            {
                this.ContextButton.ContextButtonManager.SetButton("Tongue");
            }
        }
        else if(this.ContextButton.ContextButtonManager.WantedText != this.ContextString)
        {
            this.ContextButton.ContextButtonManager.SetButton(this.ContextString);
        }
    }
    
    function TongueUpdate(event : UpdateEvent)
    {

            
        if(this.TongueFinder != null)
        {
            if(this.TongueFinder.TongueFinder.PullPlayer == true)
            {
                this.Owner.AutoHopper.Active = false;
                this.Owner.GravityEffect.Active = false;
                var targetDistanceVec = this.TongueFinder.Transform.WorldTranslation - this.Owner.Transform.WorldTranslation;
                Math.Normalize(targetDistanceVec);
                var targetAngle = Math.ATan2(targetDistanceVec.Y,targetDistanceVec.X) - 1.57079633;
                
                var flatTargetVector = Real3(targetDistanceVec.X, targetDistanceVec.Y, 0.0);
                if(this.FreezeMovement == false)
                {
                this.MoveAngle = targetAngle;
                this.Owner.Transform.Rotation = Math.Slerp(this.Owner.Transform.Rotation,Math.Euler(Real3(0.0,0.0,targetAngle)),event.Dt*this.RotateSpeed);
                this.Owner.DynamicMotor.MoveInDirection(flatTargetVector * event.Dt *  400.0, this.Orientation.WorldUp);
                }
            }
            else if(this.TongueFinder.TongueFinder.PullPlayer == false && this.TongueFinder.TongueFinder.Latched == true)
            {
                
                
            }
            else
            {
                if(this.Owner.AutoHopper != null)
                {
                    if(this.FreezeMovement == false)
                    {
                        this.Owner.DynamicMotor.MoveInDirection(Real3(0,0,0), this.Orientation.WorldUp);
                    }
                    this.Owner.GravityEffect.Active = true;

                    this.Owner.AutoHopper.Active = true;
                }
            }
        }
        else
        {
            this.Owner.GravityEffect.Active = true;
            //this.Owner.AutoHopper.Active = true;
        }
        
        //When the A Button is pressed
        if(this.Owner.InputController.Gamepad.IsButtonPressed(Buttons.A) || Zero.Keyboard.KeyIsPressed(Keys.Space))
        {
            if(this.TongueFinder != null && this.TongueFinder.TongueFinder.Latched == false )
            {
                this.TongueFinder.Destroy();
            }
            //Pull the player to the object
            if(this.TongueFinder != null && this.TongueFinder.TongueFinder.Latched == true && this.TongueFinder.TongueFinder.Destroy == false
            && this.ContextButton.ContextButtonManager.WantedText == "Pull")
            {
                this.TongueFinder.TongueFinder.PullPlayer = true;
                Console.WriteLine("Tongue Pull: `this.TongueFinder.TongueFinder.PullPlayer`");
            }
            //Yank an Object Apart
            if(this.TongueFinder != null && this.TongueFinder.TongueFinder.Latched == true && this.TongueFinder.TongueFinder.Destroy == true
            && this.ContextButton.ContextButtonManager.WantedText == "Yank")
            {
                var yankEvent = new YankEvent();
                this.TongueFinder.TongueFinder.LatchedObject.DispatchDown("yankEvent", yankEvent);
                this.TongueFinder.TongueFinder.LatchedObject.DispatchUp("yankEvent", yankEvent);
                this.TongueFinder.TongueFinder.LatchedObject.DispatchEvent("yankEvent", yankEvent);
                this.TongueFinder.Destroy();
            }
            //Grapple to the player
            if(this.TongueFinder != null && this.TongueFinder.TongueFinder.Latched == true && this.TongueFinder.TongueFinder.Destroy == false
            && this.TongueFinder.TongueFinder.Grapple == true && this.ContextButton.ContextButtonManager.WantedText == "Grapple")
            {
                this.TongueFinder.TongueFinder.PullToPlayer = true;
                this.TongueFinder.TongueFinder.PullPlayer = false;
            }
            if(this.TongueFinder == null && this.ContextButton.ContextButtonManager.WantedText == "Tongue")
            {
                this.TongueFinder = this.Space.CreateAtPosition(Archetype.Find("TongueFinder"), this.Owner.Transform.WorldTranslation + Real3(0,0,2));
                this.TongueFinder.TongueFinder.InitialDirection = this.Orientation.WorldForward;
            }

        }
    }
    function MovementUpdate(event : UpdateEvent)
    {
        if(this.Owner.InputController.GetMovement() != Real3(0,0,0))
        {
            var cameraAngle= this.Camera.OrbitCameraController.CurrentAngle;
            
            if(this.Target == null)
            {
                this.MoveAngle = 0.0;
                this.MoveAngle = Math.ATan2(this.Owner.InputController.GetMovement().X,this.Owner.InputController.GetMovement().Y) + cameraAngle + 1.57079633;

                if(this.FreezeMovement == false)
                {
                    this.Owner.Transform.Rotation = Math.Slerp(this.Owner.Transform.Rotation,Math.Euler(Real3(0.0,0.0,this.MoveAngle)),event.Dt*this.RotateSpeed);
                    this.Owner.FootstepDetector.Walk();
                    this.Owner.DynamicMotor.MoveInDirection(this.Orientation.WorldForward * event.Dt * this.MovmentSpeed, this.Orientation.WorldUp);
                }
            }
            else
            {
                if(this.FreezeMovement == false)
                {
                    this.Owner.FootstepDetector.Walk();
                    this.Owner.DynamicMotor.MoveInDirection(
                     
                    Real3(-this.Owner.InputController.GetMovement().X,this.Owner.InputController.GetMovement().Y,0) * 
                        event.Dt * this.MovmentSpeed, this.Orientation.WorldUp);
                }
            }

        }
        else
        {
            this.Owner.DynamicMotor.MoveInDirection(Real3(0,0,0), this.Orientation.WorldUp);
            //Stablizes the player
            this.Owner.RigidBody.Velocity /= Real3(this.Deceleration,this.Deceleration,1);
        }
    }
    function NoMovement(event : UpdateEvent)
    {
            this.Owner.DynamicMotor.MoveInDirection(Real3(0,0,0), this.Orientation.WorldUp);
            //Stablizes the player
            this.Owner.RigidBody.Velocity /= Real3(this.Deceleration,this.Deceleration,1);
    }
    
}