enum BirdStates{Patrolling, Swooping, Attacking, Returning}

class BirdController : ZilchComponent
{
    [Dependency]
    var Orientation : Orientation = null;
    
    [Property]
    var TargetObjectPath : CogPath = null;
    
    var TargetObject : Cog = null;
    
    [Property]
    var AttackSpeed : Real = 0.0;
    
    var IdleRotation : Quaternion = Quaternion(0,0,0,0);
    
    var AttackDirection : Real3 = Real3(0,0,0);
    var AttackDistanceFromTarget : Real = 0.0;
    var AttackRotation : Quaternion = Quaternion(0,0,0,0);
    
    
    function Initialize(init : CogInitializer)
    {
        this.TargetObject = this.TargetObjectPath.Cog;
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
    }

   
    function OnLogicUpdate(event : UpdateEvent)
    {
        
    }
    
    function Attack(event : UpdateEvent)
    {
        this.Owner.Transform.Rotation = Math.Slerp(this.Owner.Transform.Rotation, this.AttackRotation, 0.3);
        this.Owner.RigidBody.Velocity = this.AttackDirection * this.AttackSpeed;
    }
    
    function CalculateAttackDirectionAndDistance()
    {
        this.AttackDirection = this.TargetObject.Transform.Translation - this.Owner.Transform.WorldTranslation;
        this.AttackRotation = this.Owner.Orientation.GetLookAtDirectionWithUpRotation(this.AttackDirection, Real3(0,0,1));
        this.AttackDistanceFromTarget = Math.Length(this.AttackDirection);
        this.AttackDirection = Math.Normalize(this.AttackDirection);
    }
    
    function OnCollisionStarted(event : CollisionEvent)
    {
        var otherObject = event.OtherObject;
        if(otherObject.Name == this.TargetObject.Name)
        {
            this.Owner.Destroy();
        }
    }

}
