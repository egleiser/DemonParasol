//Written by: Jason Clark
//© 2015 DigiPen, All Rights Reserved.

/////////////////////////////////////////
////                                 ////
////  Name: BirdController.z         ////
////    Written by: Jason Clark      ////
////                                 ////
////     Last Updated: 12-11-14      ////
////                                 ////
/////////////////////////////////////////
enum BirdStates{Patrolling, Swooping, Attacking, Returning}

class BirdController : ZilchComponent
{
    [Dependency]
    var Orientation : Orientation = null;
    
    [Property]
    var TargetObjectPath : CogPath = null;
    
    var TargetObject : Cog = null;
    
    [Property]
    var AttackTriggerDistance : Real = 0.0;
    
    [Property]
    var AttackSpeed : Real = 0.0;
    
    [Property]
    var DeathArchetype : Archetype = null;
    
    var IdleRotation : Quaternion = Quaternion(0,0,0,0);
    
    var AttackDirection : Real3 = Real3(0,0,0);
    var AttackDistanceFromTarget : Real = 0.0;
    var AttackRotation : Quaternion = Quaternion(0,0,0,0);
    
    var OriginalPosition : Real3 = Real3(0,0,0);
    
    
    function Initialize(init : CogInitializer)
    {
        this.TargetObject = this.TargetObjectPath.Cog;
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
    }

   
    function OnLogicUpdate(event : UpdateEvent)
    {
        this.CalculateAttackDirectionAndDistance();
        if(this.AttackDistanceFromTarget <= this.AttackTriggerDistance)
        {
            this.Owner.Parent.AnimationGraph.Active = false;
            this.Attack(event);
        }
    }
    
    function Attack(event : UpdateEvent)
    {
        this.Owner.Transform.Rotation = Math.Slerp(this.Owner.Transform.Rotation, this.AttackRotation, 0.3);
        this.Owner.RigidBody.Velocity = this.AttackDirection * this.AttackSpeed;
    }
    
    function CalculateAttackDirectionAndDistance()
    {
        this.AttackDirection = this.TargetObject.Transform.Translation - this.Owner.Transform.WorldTranslation;
        this.AttackRotation = this.Owner.Orientation.GetLookAtDirectionWithUpRotation(this.AttackDirection, Real3(0,0,1));
        this.AttackDistanceFromTarget = Math.Length(this.AttackDirection);
        this.AttackDirection = Math.Normalize(this.AttackDirection);
    }
    
    function OnCollisionStarted(event : CollisionEvent)
    {
        var otherObject = event.OtherObject;
        if(otherObject.Name == this.TargetObject.Name)
        {
            var pos = this.Owner.Transform.Translation;
            for(var i:Integer = 0; i < 25; ++i)
            {
                this.Space.CreateAtPosition(this.DeathArchetype, pos);
            }
            this.Owner.Destroy();
        }
    }

}
