class RunAwayFromTarget : ZilchComponent
{
    [Dependency]
    var Orientation : Orientation = null;
    
    [Property]
    var TargetObjectPath : CogPath = null;
    
    [Property]
    var RunAwayTriggerDistance : Real = 2.0;
    
    [Property]
    var RunAwayColor : Real4 = Real4(0,0,0,0);
    
    [Property]
    var MaxRunAwayDistance : Real = 0.0;
    
    [Property]
    var RunAwaySpeed : Real = 0.0;
    
    var TargetObject : Cog = null;
    
    var TargetIsWithinRunAwayRange : Boolean = false;
    var RunAwayDirection : Real3 = Real3(0,0,0);
    var RunAwayRotation : Quaternion = Quaternion(0,0,0,0);
    var RunAwayStartPosition : Real3 = Real3(0,0,0);
    var RunningAwayDistance : Real = 0;
    var RunningAway : Boolean = false;
    var RunAwayDistanceFromTarget : Real = 0.0;
    
    function Initialize(init : CogInitializer)
    {
        this.TargetObject = this.TargetObjectPath.Cog;
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        var targetIsWithinRunAwayRange : Boolean = false;
        
        if(this.TargetObject != null)
        {
            this.CalculateRunAwayDirectionAndDistance();
        }
        
        if(this.Owner.WarnTarget != null)
        {
            //if(this.Owner.WarnTarget.TargetIsWithinWarnRange && /*this.Target*/)
            //{
            //    this.RunningAwayFromTarget(event);
            //}
        }
        else
        {
            this.RunningAwayFromTarget(event);
        }
    }
    
    /*This function does a few things: First, it changes the color of the model to show that running away
    is now active. Second, it moves the dog in a direction directly opposite that of the player.
    Finally, it checks to see how far the dog has run away from it's original start point. If it
    reaches its MaxRunAwayDistance then a function is called that returns it back to its start spot.*/
    function RunningAwayFromTarget(event : UpdateEvent)
    {
        //Changes color to Green to show Running Away condition has been met
        this.Owner.Model.Color = this.RunAwayColor;
        this.Owner.Transform.Rotation = Math.Slerp(this.Owner.Transform.Rotation, this.RunAwayRotation, 3.5 * event.Dt);
        //Console.WriteLine(this.RunAwayDirection);
        //Dog moves off in a direction opposite that of player as defined in calculate function below
        this.Owner.RigidBody.Velocity = this.RunAwayDirection * this.RunAwaySpeed;
        
        /*These next few lines are to determine how far the Dog has
        run away and what to do when it reaches its max running away
        distance (it calls the ReturnToStart function)*/
        
        //Gets the displacement vector between the start position and where the dog currently is
        var runAwayDisplacement : Real3 = this.Owner.Transform.Translation - this.RunAwayStartPosition;
        //Constantly updates the distance variable with the length of the displacement vector
        //In other words, it sees how far the dog has run each update
        this.RunningAwayDistance = Math.Length(runAwayDisplacement);
        //Console.WriteLine("Running Away Distance = `this.RunningAwayDistance`");
        
    }
    
    function CalculateRunAwayDirectionAndDistance()
    {
        var playerpos = this.TargetObject.Transform.Translation;
        playerpos.Z = 0.0;
        var dogpos = this.Owner.Transform.Translation;
        dogpos.Z = 0.0;
        var reverseDirection : Real3 = Real3(0,0,0);
        reverseDirection = playerpos - dogpos;
        
        this.RunAwayDirection = -reverseDirection;
        this.RunAwayDistanceFromTarget = Math.Length(reverseDirection);
        this.RunAwayRotation = this.Owner.Orientation.GetLookAtDirectionWithUpRotation(this.RunAwayDirection, Real3(0,0,1));
        this.RunAwayDirection = Math.Normalize(this.RunAwayDirection);
        
    }
}
