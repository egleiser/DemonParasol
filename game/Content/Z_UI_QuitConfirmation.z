/*//////////////////////////////////////////////////////////////////////////////////////////////////////////
//FILE-Z_UI_QuitConfirmation.z
//AUTHOR-Travis Moore
//COURSE-GAM205
//COPYRIGHT-© 2014 DigiPen, All Rights Reserved.
//////////////////////////////////////////////////////////////////////////////////////////////////////////*/
class Z_UI_QuitConfirmation:ZilchComponent
{
    //PROPERTIES
    
    //FADE
    [Property]
    var FadeInTime:Real = 0.5;
    [Property]
    var FadeOutTime:Real = 0.25;
    
    //SCALE
    [Property]
    var ScaleOutSize:Real3 = Real3(0.75, 0.75, 0.75);
    [Property]
    var ScaleOutTime:Real = 0.2;
    [Property]
    var ScaleInSize:Real3 = Real3(1,1,1);
    [Property]
    var ScaleInTime:Real = 0.8;
    
    //EASE
    [Property]
    var EaseType:Ease = Ease.QuadIn;
    
    //non-settables
    var StartingPosition:Real3 = Real3();
    var StartingScale:Real3 = Real3();
    var Focus:Cog = null;
    var BtnYes:Cog = null;
    var BtnNo:Cog = null;
    
    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-Initialize
    //EXPLANATION-Initialize variables/functions so that we can use them
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function Initialize(init:CogInitializer):Void
    {
        //set starting position
        this.StartingPosition = this.Owner.Transform.Translation;
        this.StartingScale = this.Owner.Transform.Scale;
        
        //ensure we are invisible from the beginning
        this.Owner.Sprite.Color = Real4(1,1,1,0.0);
        this.Focus = this.Owner.FindChildByName("ui_focus");
        this.Focus.Sprite.Color = Real4(1,1,1,0.0);
        this.BtnYes = this.Owner.FindChildByName("btn-yes");
        this.BtnYes.Sprite.Color = Real4(1,1,1,0.0);
        this.BtnNo = this.Owner.FindChildByName("btn-no");
        this.BtnNo.Sprite.Color = Real4(1,1,1,0.0);
        
        //move everything out of the way
        this.Owner.Transform.Translation = Real3(0,-50,0);
    }
    
    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-FadeIn
    //EXPLANATION-Transparency 0.0 -> 1.0
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function FadeIn():Void
    {
        //create action sequence
        var aFadeIn = Action.Group(this.Owner.Actions);
        
        //move into position
        Action.Property(aFadeIn,
                        @this.Owner.Transform.Translation,
                        this.StartingPosition,
                        0.1,
                        Ease.Linear);
                        
        //fade in quit dialog
        Action.Property(aFadeIn,
                        @this.Owner.Sprite.Color,
                        Real4(1,1,1,1.0),
                        this.FadeInTime,
                        Ease.Linear);
                        
        //fade in focus
        Action.Property(aFadeIn,
                        @this.Focus.Sprite.Color,
                        Real4(1,1,1,1.0),
                        this.FadeInTime,
                        Ease.Linear);
                        
        //fade in yes
        Action.Property(aFadeIn,
                        @this.BtnYes.Sprite.Color,
                        Real4(1,1,1,1.0),
                        this.FadeInTime,
                        Ease.Linear);
                        
        //fade in no
        Action.Property(aFadeIn,
                        @this.BtnNo.Sprite.Color,
                        Real4(1,1,1,1.0),
                        this.FadeInTime,
                        Ease.Linear);
    }
    
    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-FadeOut
    //EXPLANATION-Transparency 1.0 -> 0.0
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function FadeOut():Void
    {
        //create action sequence
        var aFadeOut = Action.Group(this.Owner.Actions);
        
        //fade in quit dialog
        Action.Property(aFadeOut,
                        @this.Owner.Sprite.Color,
                        Real4(1,1,1,0.0),
                        this.FadeInTime,
                        Ease.Linear);
                        
        //fade in focus
        Action.Property(aFadeOut,
                        @this.Focus.Sprite.Color,
                        Real4(1,1,1,0.0),
                        this.FadeInTime,
                        Ease.Linear);
                        
        //fade in yes
        Action.Property(aFadeOut,
                        @this.BtnYes.Sprite.Color,
                        Real4(1,1,1,0.0),
                        this.FadeInTime,
                        Ease.Linear);
                        
        //fade in no
        Action.Property(aFadeOut,
                        @this.BtnNo.Sprite.Color,
                        Real4(1,1,1,0.0),
                        this.FadeInTime,
                        Ease.Linear);
        Action.Delay(aFadeOut, 1.0);
        
        //move out position
        Action.Call(aFadeOut, this.MoveAway);
    }
    
    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-MoveAway
    //EXPLANATION-Wait,then move away so we don't accidentally click the yes or no buttons
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function MoveAway():Void
    {
        var aWaitThenMove = Action.Sequence(this.Owner.Actions);
        
        //wait
        Action.Delay(aWaitThenMove, 1.5);
        
        //move out position
        Action.Property(aWaitThenMove,
                        @this.Owner.Transform.Translation,
                        Real3(this.StartingPosition.X, -50, this.StartingPosition.Z),
                        0.1,
                        Ease.Linear);
    }
}
