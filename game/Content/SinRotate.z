class SinRotate : ZilchComponent
{
    [Property]
    var SinSpeedX:Real = 5.0;
    [Property]
    var SinSpeedY:Real = 5.0;
    [Property]
    var Intensity:Real = 1.0;
    [Property]
    var UseInitialRot:Boolean = false;
    var RotationOffset:Quaternion = Quaternion(0,0,0,0);
    var RotationInitial:Quaternion = Quaternion(0,0,0,0);
    function Initialize(init : CogInitializer)
    {
        this.RotationInitial = this.Owner.Transform.WorldRotation;
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        var zPos:Real = this.Owner.Transform.WorldTranslation.Z + this.Owner.Transform.WorldTranslation.X + this.Owner.Transform.WorldTranslation.Y;
        this.RotationOffset = Math.Euler(Real3(Math.Sin(zPos + event.TimePassed * this.SinSpeedX) * this.Intensity,Math.Sin(zPos + event.TimePassed * this.SinSpeedY)* this.Intensity,0));
        if(this.UseInitialRot)
        {
            this.Owner.Transform.WorldRotation = Math.Transform(this.RotationInitial, this.RotationOffset);
        }
        else
        {
            this.Owner.Transform.WorldRotation = Math.Transform(this.Owner.Transform.WorldRotation, this.RotationOffset);
        }
        
    }
}
