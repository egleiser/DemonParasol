//Written by: Eric Gleiser
//© 2015 DigiPen, All Rights Reserved.

/////////////////////////////////////////
////                                 ////
////  Name: SinRotate.z              ////
////    Written by: Eric Gleiser     ////
////                                 ////
////     Last Updated: 12-11-14      ////
////                                 ////
/////////////////////////////////////////
class SinRotate : ZilchComponent
{
    [Property]
    var SinSpeedX:Real = 5.0;
    [Property]
    var SinSpeedY:Real = 5.0;
    [Property]
    var Intensity:Real = 1.0;
    [Property]
    var UseInitialRot:Boolean = false;
    [Property]
    var UseLocal:Boolean = false;
    var Active:Boolean = true;
    var RotationOffset:Quaternion = Quaternion(0,0,0,0);
    var RotationInitial:Quaternion = Quaternion(0,0,0,0);
    var InitTrans:Real = 0.0;
    function Initialize(init : CogInitializer)
    {
        if(this.UseLocal)
        {
            this.RotationInitial = this.Owner.Transform.LocalRotation;
        }
        else
        {
            this.RotationInitial = this.Owner.Transform.WorldRotation;
        }
        
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.EnterView, this.OnEnterView);
        Zero.Connect(this.Owner, Events.ExitView, this.OnExitView);
        this.InitTrans = this.Owner.Transform.WorldTranslation.Z + this.Owner.Transform.WorldTranslation.X + this.Owner.Transform.WorldTranslation.Y;
    }
    function OnEnterView(event : GraphicalEvent)
    {
        this.Active = true;
    }
    
    function OnExitView(event : GraphicalEvent)
    {
        this.Active = false;
    }
    function OnLogicUpdate(event : UpdateEvent)
    {

        if(this.Active == true)
        {
            this.RotationOffset = Math.Euler(Real3(Math.Sin(this.InitTrans + event.TimePassed * this.SinSpeedX) * this.Intensity,Math.Sin(this.InitTrans + event.TimePassed * this.SinSpeedY )* this.Intensity,0));
            if(this.UseLocal)
            {
                if(this.UseInitialRot)
                {
                    this.Owner.Transform.LocalRotation = Math.Transform(this.RotationInitial, this.RotationOffset);
                }
                else
                {
                    this.Owner.Transform.LocalRotation = Math.Transform(this.Owner.Transform.LocalRotation, this.RotationOffset);
                }
            }
            else
            {
                if(this.UseInitialRot)
                {
                    this.Owner.Transform.WorldRotation = Math.Transform(this.RotationInitial, this.RotationOffset);
                }
                else
                {
                    this.Owner.Transform.WorldRotation = Math.Transform(this.Owner.Transform.WorldRotation, this.RotationOffset);
                }
            }
        }
        
    }
}
