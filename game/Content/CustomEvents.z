class ContextEvent : Event
{
    var Context : ContextState = ContextState.Sleep;
}  
class BlockEvent : Event
{
    var InfoToSend : String = "";
    var NumberToSend : Integer = 0;
}  
class TriggerEvent : Event
{
    var Activate : Boolean = false;
}  
class AttackEvent : Event
{
    var InfoToSend : String = "";
    var NumberToSend : Integer = 0;
}  
class HitEvent : Event
{
    var DispatcherName : String = "";
    var NumberToSend : Integer = 0;
}  
class YankEvent : Event
{
    var DispatcherName : String = "";
    var NumberToSend : Integer = 0;
}  
class CinemaEvent : Event
{
    var CamEventType : String = "";
    var CamTarget : Cog = null;
    var LetterBox : Boolean = false;
    var StartPosition : Real3 = Real3(0.0,0.0,0.0);
    var EndPosition : Real3 = Real3(0.0,0.0,0.0);
    var EasingCurve : SampleCurve = null;
}
class CameraZoomEvent : Event
{
    //Indicates whether the initial zoom is active
    var IsZoomingIn : Boolean = false;
    //The main variable to change when zooming
    var CamSize : Real = 0.0;
    //Use if you want to zoom TOWARDS another object besides the player
    var CameraTarget : Cog = null;
    //Hpefully this will be for a custom ease later on
    var EasingCurve : Ease = Ease.QuadInOut;
    //Time for zooming
    var ZoomTime : Real = 0.0;
}
class CameraPanEvent : Event
{
    //Indicates whether the initial pan has occurred
    var IsActive : Boolean = false;
    //Use if you want to rotate TOWARDS another object besides the player
    var PanTarget : Cog = null;
    //Use if you want to rotate using a specific quaternion value
    var EndRotation : Quaternion = Quaternion(0,0,0,0);
    //The start rotation before panning
    var StartRotation : Quaternion = Quaternion(0,0,0,0);
    //The time it takes to perform the pan
    var PanTime : Real = 0.0;
    //Hopefully this will be for a custom ease later on
    var EasingCurve : Ease = Ease.Linear;
}
class CameraDollyEvent : Event
{
    //Indicates whether the initial dolly has occurred
    var IsActive : Boolean = false;
    //Boolean for checking whether the target should stay the focus of the camera
    //during the dolly or not
    var TargetFocus : Boolean = false;
    //Use if you want to dolly to an object (either pre-set object or one created at runtime)
    var DollyTarget : Cog = null;
    //If there is no target object, just set your own translation
    var EndPosition: Real3  = Real3(0.0,0.0,0.0);
    //The time it takes to perform the dolly
    var DollyTime : Real = 0.0;
    //Hopefully this will be for a custom ease later on
    var EasingCurve : Ease = Ease.QuadInOut;
}
class PanFinishedEvent : Event
{
}
class DollyFinishedEvent : Event
{
}
class CameraLockEvent : Event
{
    var IsLocked : Boolean  = false;
}
class HUDLetterboxEvent : Event
{
    //The distance on screen you want the top and bottom sprites to move to (bottom is
    //just the negative of whatever value is chosen)
    var DistanceOnScreen : Real = 0.0;
    //Time for Letterbox Action (in or out) to complete
    var InOutTime : Real = 0.0;
    //The ease type for the letterboxing
    var EaseCurve : Ease = Ease.QuadOut;
}
class TextBoxEvent : Event
{
    var DistanceOnScreen : Real = 0.0;
    var InOutTime : Real = 0.0;
    var EaseCurve : Ease = Ease.QuadOut;
    var Opacity : Real = 0.0;
    var OpacityTimeIn : Real = 0.0;
    var OpacityEase : Ease = Ease.Linear;
}
class TextScrollEvent : Event
{
    var TextToWrite : TextBlock = TextBlock.Find("TextTextBlock");
}


