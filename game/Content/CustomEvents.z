/////////////////////////////////////////
////                                 ////
////  Name: CustomEvents.z           ////
////    Written by: Eric Gleiser     ////
////               Jason Clark       ////
////     Last Updated: 03-18-15      ////
////                                 ////
/////////////////////////////////////////
class ContextEvent : Event
{
    var Context : ContextState = ContextState.Sleep;
}  
class AlertEvent : Event
{
    var InfoToSend : String = "";
}  
class BlockEvent : Event
{
    var InfoToSend : String = "";
    var NumberToSend : Integer = 0;
}  
class TriggerEvent : Event
{
    var Activate : Boolean = false;
}  
class AttackEvent : Event
{
    var InfoToSend : String = "";
    var NumberToSend : Integer = 0;
}  
class HitEvent : Event
{
    var DispatcherName : String = "";
    var NumberToSend : Integer = 0;
}  
class YankEvent : Event
{
    var DispatcherName : String = "";
    var NumberToSend : Integer = 0;
}  
class CinemaEvent : Event
{
    var CamEventType : String = "";
    var CamTarget : Cog = null;
    var LetterBox : Boolean = false;
    var StartPosition : Real3 = Real3(0.0,0.0,0.0);
    var EndPosition : Real3 = Real3(0.0,0.0,0.0);
    var EasingCurve : SampleCurve = null;
}
//Event for zooming camera (that is, changing camera's size value)
class CameraZoomEvent : Event
{
    //Indicates whether this zoom event is zooming away from the standard camsize
    //value used throughout the game. When zooming in or out, set to true; when you
    //want to zoom back to the original, standard position, set to false.
    var IsZoomingIn : Boolean = false;
    //The main variable to change when zooming
    var CamSize : Real = 0.0;
    //Use if you want to zoom TOWARDS another object besides the player
    var CameraTarget : Cog = null;
    //Hpefully this will be for a custom ease later on
    var EaseCurve : Ease = Ease.QuadInOut;
    //Time for zooming
    var ZoomTime : Real = 0.0;
}
//Event for panning camera (that is, changing it's local rotation)
class CameraPanEvent : Event
{
    //Indicates whether the initial pan has occurred
    var IsActive : Boolean = false;
    //Use if you want to rotate TOWARDS another object besides the player
    var PanTarget : Cog = null;
    //Use if you want to rotate using a specific quaternion value (that is, not an actual object)
    var EndRotation : Quaternion = Quaternion(0,0,0,0);
    //The start rotation before panning
    var StartRotation : Quaternion = Quaternion(0,0,0,0);
    //The time it takes to perform the pan
    var PanTime : Real = 0.0;
    //Hopefully this will be for a custom ease later on
    var EasingCurve : Ease = Ease.Linear;
}
//Event for dollying camera (that is, changing its transformation)
class CameraDollyEvent : Event
{
    //Indicates whether the initial dolly has occurred
    var IsActive : Boolean = false;
    //Boolean for checking whether the target should stay the focus of the camera
    //during the dolly or not
    var TargetFocus : Boolean = false;
    //Use if you want to dolly to an object (either pre-set object or one created at runtime)
    var DollyTarget : Cog = null;
    //If there is no target object, just set your own translation
    var EndPosition: Real3  = Real3(0.0,0.0,0.0);
    //The time it takes to perform the dolly
    var DollyTime : Real = 0.0;
    //Hopefully this will be for a custom ease later on
    var EasingCurve : Ease = Ease.QuadInOut;
}
//Event for Fading In or Out
class FadeToBlackEvent : Event
{
    //Boolean to check whether it's a Fade In event. If FALSE, event will FADE OUT.
    //If TRUE, event will FADE IN!!!!!!!!!!!
    var IsFadeIn : Boolean = false;
    var TimeToFade : Real = 0.0;
    var EaseCurve : Ease = Ease.QuadOut;
}
//Event for when camera pan has finished
class PanFinishedEvent : Event
{
}
//Event for when camera dolly has finished
class DollyFinishedEvent : Event
{
}
//Event for locking update state of camera
class CameraLockEvent : Event
{
    var IsLocked : Boolean  = false;
}
class HUDLetterboxEvent : Event
{
    //The distance on screen you want the top and bottom sprites to move to (bottom is
    //just the negative of whatever value is chosen)
    var DistanceOnScreen : Real = 0.0;
    //Time for Letterbox Action (in or out) to complete
    var InOutTime : Real = 0.0;
    //The ease type for the letterboxing
    var EaseCurve : Ease = Ease.QuadOut;
}
class TextBoxEvent : Event
{
    //Dialogue Segment to grab text and sprites from
    var DialogueSegmentToUse : Cog = null;
    //Distance the text box will move on screen
    var DistanceOnScreen : Real = 0.0;
    //The time it takes for the text box to move on and off the screen
    var InOutTime : Real = 0.0;
    //The ease curve applied to the action moving the text box on and off teh screen
    var EaseCurve : Ease = Ease.QuadOut;
    //The opacity of the text box
    var Opacity : Real = 0.0;
    //The time for the opacity to change
    var OpacityTimeIn : Real = 0.0;
    //The ease for the opacity to change applied to the action
    var OpacityEase : Ease = Ease.Linear;
}
//Event for starting text scroll
class TextScrollEvent : Event
{
    //The text block with the text that will be scrolled on each scroll event
    var TextToWrite : TextBlock = null;
}
//Event for continue dialogue past the initial text block
class ContinueDialogueEvent : Event
{
}
//Event for dialogue event started
class DialogueStartedEvent : Event
{
    //The current dialogue segment for hte dialogue event
    var CurrentDialogueSegment : Cog = null;
}
//Event for when a dialogue segment has ended
class DialogueEventFinished : Event
{
    //THe current dialogue segment for the dialogue event
    var CurrentDialogueSegment : Cog = null;
}
//Event for when a Fade In has ended
class FadeInEndedEvent : Event
{
    
}
//Event for when a Fade Out has ended
class FadeOutEndedEvent : Event
{
    
}


