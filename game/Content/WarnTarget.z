class WarnTarget : ZilchComponent
{
    [Dependency]
    var Orientation : Orientation = null;
    
    [Property]
    var TargetObjectPath : CogPath = null;
    
    [Property]
    var WarnTriggerDistance : Real = 5.0;
    
    [Property]
    var WarnColor : Real4 = Real4(0,0,0,0);
    
    [Property]
    var WarnScale : Real3 = Real3(0,0,0);
    
    var TargetObject : Cog = null;
    
    var TargetIsWithinWarnRange : Boolean = false;
    var WarnDirection : Real3 = Real3(0,0,0);
    var WarnRotation : Quaternion = Quaternion(0,0,0,0);
    var WarnTimer : Integer = 0;
    var WarnDistanceFromTarget : Real = 0.0;
    
    function Initialize(init : CogInitializer)
    {
        this.TargetObject = this.TargetObjectPath.Cog;
        
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        this.CalculateWarnDirectionAndDistance();
        this.WarnTarget(event);
    }
    
    /*This function is called when the player gets within the BarkTriggerDistance.
    It will chnage the model color to show that its in its barking state and then
    rotate the dog to look at the player*/
    function WarnTarget(event : UpdateEvent)
    {
        this.WarnTimer += 1;
        this.Owner.RigidBody.Velocity = Real3();
        var startScale : Real3 = Real3(0,0,0);
        startScale = this.Owner.Transform.Scale;
        if(this.WarnTimer % 180 == 0)
        {
            this.Owner.SoundEmitter.Play();
            var seq = Action.Sequence(this.Owner.Actions);
            Action.Property(seq, @this.Owner.Transform.Scale, this.WarnScale, 0.05, Ease.Linear);
            Action.Property(seq, @this.Owner.Transform.Scale, startScale, 0.3, Ease.Linear);
        }
        //Changes model color to the user defined color for barking
        this.Owner.Model.Color = this.WarnColor; 
        
        
        //Grabs the quaternion for the rotation towards the player, based on BarkDirection
        //which is defined in the Calculate function directly below
        this.WarnRotation = this.Orientation.GetLookAtDirectionWithUpRotation(-this.WarnDirection, Real3(0,0,1));
        //Slerps the dogs rotation towards the player using the BarkRotation quaternion
        this.Owner.Transform.Rotation = Math.Slerp(this.Owner.Transform.Rotation, this.WarnRotation, 3.5 * event.Dt);
        //this.RunAwayStartPosition = this.Owner.Transform.Translation;
        //Console.WriteLine("Bark, Bark");
    }
    
    /*This function gets the direction vector towards the target this object is barking at
    normalizes it, and also gets the length of that vector before its normalized*/
    function CalculateWarnDirectionAndDistance()
    {
        var playerpos = this.TargetObject.Transform.Translation;
        playerpos.Z = 0.0;
        var enemypos = this.Owner.Transform.Translation;
        enemypos.Z = 0.0;
        //Grabs the vector from the dog towards the player
        this.WarnDirection = enemypos - playerpos;
        //Gets the length of this vector to be used in LogicUpdate
        this.WarnDistanceFromTarget = Math.Length(this.WarnDirection);
        //Normalizes the vector to be used when getting the rotation for the dog in the BarkAtTarget
        //function above
        this.WarnDirection = Math.Normalize(this.WarnDirection);
    }

}
