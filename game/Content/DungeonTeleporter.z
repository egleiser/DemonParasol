/////////////////////////////////////////
////                                 ////
////  Name: DungeonTeleporter.z      ////
////    Written by: Eric Gleiser     ////
////                                 ////
////     Last Updated: 12-11-14      ////
////                                 ////
/////////////////////////////////////////
class DungeonTeleporter : ZilchComponent
{
    [Property]
    var Room:Level = null;
    var Player:Cog = null;
    var Active:Boolean = false;
    function Initialize(init : CogInitializer)
    {
        this.Player = this.LevelSettings.CameraViewport.Camera.OrbitCameraController.OrbitTarget.Cog;
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }
    function OnCollisionStarted(event : CollisionEvent)
    {
        var otherObject = event.OtherObject;
        if(otherObject.Name == "Player" && this.Active == false)
        {
            this.Space.SoundSpace.PlayCue(SoundCue.Find("TeleportSound"));
            this.Player.PlayerController.Active = false;
            if(this.Player.AutoHopper != null)
            {
                this.Player.AutoHopper.Active = false;
            }
            this.Active = true;
            var fadeEvent = new FadeToBlackEvent();
            fadeEvent.EaseCurve = Ease.Linear;
            fadeEvent.IsFadeIn = false;
            fadeEvent.TimeToFade = 2.0;
            this.LevelSettings.CameraViewport.Camera.DispatchEvent("fadeEvent", fadeEvent);
            var teleport = Action.Sequence(this.Owner.Actions);
            Action.Delay(teleport, 2.0);
            Action.Call(teleport, this.Teleport);
        }

    }
    function Teleport()
    {
        this.LevelSettings.DataLoader.SaveFile.SaveData.LastLevel = this.Space.CurrentLevel.Name;
        this.LevelSettings.DataLoader.StoreSaveFile();
        this.Space.LoadLevel(this.Room);
    }
    function OnLogicUpdate(event : UpdateEvent)
    {
        if(this.Active)
        {
            this.Player.DynamicMotor.MoveInDirection(Real3(0,0.5,5),Real3(0,0,1));
        }
    }
}
