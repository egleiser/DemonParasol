/////////////////////////////////////////
////                                 ////
////  Name: TextScrollManager.z      ////
////    Written by: Jason Clark      ////
////     Last Updated: 9-17-14       ////
////                                 ////
/////////////////////////////////////////
class TextScrollManager : ZilchComponent
{
    //TextBlock taken from TextBlockInfo
    var TextBlockToPrint : TextBlock = null;
    
    //The complete string that will be printed
    var GoalString : String = null;
    //The string as it exists each moment while it is printed
    var CurrentString : String = null;
    //The index of the character in the string that is being printed
    var CurrentIndex : Integer = 0;
    
    //Variables taken from the TextBlockElieInfo
    var SpeakerPicture : SpriteSource = null;
    var SpeakerName : String = "";
    
    [Property]
    var TextBoxPath : CogPath = null;
    var TextBox : Cog = null;
    
    //Gamepad variables
    [Property]
    var GamepadIndex:Integer = 0;
    var Gamepad:Gamepad = null;
    
    var EmptyText : TextBlock = null;
    
    var PlayerDeactivated : Boolean = false;
    
    var TextDelay : Real = 0.0;
    var IsPunctuation : Boolean = false;
    
    //A higher delay to use after certain punctuation marks
    [Property]
    var PunctuationDelay : Real = 0.1;
    
    //The standard delay for printing characters
    [Property]
    var LetterDelay : Real = 0.05;
    //Boolean to check whether text is currently scrolling
    //Used if player wishes to have text scroll very quickly
    var TextIsScrolling : Boolean = false;
    
    var ButtonAPresses : Integer = 0;
    
    //The Action Set that controls the delays
    var TextSeq : ActionSet = null;
    //The Action Set to control delay between speaker changes
    var ChangeSeq : ActionSet = null;
    
    var ChangeDelay : Real = 0.5;
    
    function Initialize(init : CogInitializer)
    {
        this.Gamepad = Zero.Gamepads.GetGamePad(this.GamepadIndex);
        this.TextBox = this.TextBoxPath.Cog;
        this.EmptyText = TextBlock.Find("EmptyBlock");
        
        this.TextIsScrolling = true;
        
        Zero.Connect(this.Owner, "textScrollEvent", this.OntextScrollEvent);
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Space, "dialogueFinished", this.OnDialogueFinished);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        Console.WriteLine(this.Owner.SpriteText.Text);
        if(this.PlayerDeactivated == true)
        {
            var textManager = this.Space.FindObjectByName("TextBox").TextBoxManager;
            var diagSeg = textManager.DialogueSegment;
            //Console.WriteLine("Current Dialogue Segment = `diagSeg`");
            if(textManager.DialogueFinished == true)
            {
                Console.WriteLine("This prints if dialogue is finsihed");
                this.Owner.SpriteText.Text = "";
                var mainSpace = this.GameSession.FindSpaceByName("Main");
                var dialogueFinished = new DialogueEventFinished();
                dialogueFinished.CurrentDialogueSegment = diagSeg;
                mainSpace.DispatchEvent("dialogueFinished", dialogueFinished);
                textManager.DialogueFinished = false;
            }
            
            if(this.Gamepad.IsButtonPressed(Buttons.A) || Zero.Keyboard.KeyIsPressed(Keys.Space))
            {
                //Change this to a different button.
                if(this.TextIsScrolling == false)
                {
                    Console.WriteLine("This is the problem area");
                    this.TextSeq.Cancel();
                    this.ChangeSeq = Action.Sequence(this.Owner.Actions);
                    Actions.Delay(this.ChangeSeq, this.ChangeDelay);
                    Actions.Call(this.ChangeSeq, this.ContinueEventCall);
                    this.TextIsScrolling = true;
                }
                else
                {
                    Console.WriteLine("Not the problem area");
                    this.LetterDelay = 0.0;
                    this.PunctuationDelay = 0.0;
                }
            }
            //if(this.Gamepad.IsButtonPressed(Buttons.B))
            //{
                //var e = new TextScrollEvent();
                //e.TextToWrite = this.EmptyText;
                //this.Owner.DispatchEvent("textScrollEvent", e);
                //this.TextIsScrolling = true;
                //this.Owner.SpriteText.Text = "";
                //this.CurrentString = "";
            //}
        }
    }

    function OntextScrollEvent(event : TextScrollEvent)
    {
        if(this.TextSeq != null)
        {
            this.TextSeq.Cancel();
        }
        this.PlayerDeactivated = true;
        
        this.CurrentIndex = 0;
        this.CurrentString = null;
        this.GoalString = event.TextToWrite.Text;
        //this.Owner.SpriteText.Text = "";
        
        this.TextSeq = Action.Sequence(this.Owner.Actions);
        
        Actions.Delay(this.TextSeq, this.TextDelay);
        Actions.Call(this.TextSeq, this.TextScroll);
        //this.ParticleScroll(this.CurrentIndex);
    }
    
    function TextScroll()
    {
        if(this.GoalString == this.CurrentString)
        {
            Console.WriteLine("Text Scroll End Condition Is Met");
            this.PunctuationDelay = 0.1;
            this.LetterDelay = 0.05;
            this.TextIsScrolling = false;
            return;
        }
        
        if(Zero.Keyboard.KeyIsPressed(Keys.Space) || this.Gamepad.IsButtonPressed(Buttons.A))
        {
            this.CurrentString = this.GoalString;
        }
        else
        {
            if(this.GoalString != this.CurrentString)
            {
                this.CurrentString = this.GoalString.SubString(0, this.CurrentIndex + 1);
            }
        }
        
        var currentCharacterInt:Integer = this.GoalString.Get(this.CurrentIndex);
        var currentCharacter:String = null;
        
        currentCharacter = String.FromChar(currentCharacterInt);
        
        this.TextDelay = this.LetterDelay;
        
        if(this.IsPunctuation)
        {
            this.TextDelay = this.PunctuationDelay;
            this.IsPunctuation = false;
        }
        if(currentCharacter == "." || currentCharacter == "?" || currentCharacter == "!")
        {
            this.IsPunctuation = true;
        }
        
        this.CurrentIndex += 1;
        
        //this is where the extra screen wrapping code would go
        if(this.CurrentIndex > 1)
        {
            this.Owner.SpriteText.Text = this.CurrentString;
        }
        else
        {
            this.Owner.SpriteText.Text = "";
        }
        
        this.TextSeq = Action.Sequence(this.Owner.Actions);
        
        Actions.Delay(this.TextSeq, this.TextDelay);
        Actions.Call(this.TextSeq, this.TextScroll);
        //this.ParticleScroll(this.CurrentIndex);
    }
    
    function ContinueEventCall()
    {
        var e = new ContinueDialogueEvent();
        this.TextBox.DispatchEvent("continueDialogue", e);
    }
    
    function OnDialogueFinished(event : DialogueEventFinished)
    {
        Console.WriteLine("Not sure this should happen");
        this.Owner.SpriteText.Text = "";
    }
    
    
    //function ParticleScroll(currentCharacterIndex:Integer)
    //{
    //    var particle:Cog = this.Space.FindObjectByName("TextBoxParticle");
        
    //    var currentCharacterPosition:Real3 = this.Owner.SpriteText.GetCharacterPosition(this.CurrentIndex);
    //    Console.WriteLine("Pos: `currentCharacterPosition`");
    //    //currentCharacterPosition = this.Owner.Transform.TransformPoint(currentCharacterPosition);
        
    //    //particle.SpriteParticleSystem.Visible = true;
    //    particle.Transform.Translation = currentCharacterPosition;// = Math.Lerp(particle.Transform.Translation, currentCharacterPosition, 1.0);
    //}
}
    