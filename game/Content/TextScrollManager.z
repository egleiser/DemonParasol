/////////////////////////////////////////
////                                 ////
////  Name: TextScrollManager.z      ////
////    Written by: Jason Clark      ////
////     Last Updated: 9-17-14       ////
////                                 ////
/////////////////////////////////////////
class TextScrollManager : ZilchComponent
{
    //TextBlock taken from TextBlockInfo
    var TextBlockToPrint : TextBlock = null;
    
    //The complete string that will be printed
    var GoalString : String = null;
    //The string as it exists each moment while it is printed
    var CurrentString : String = null;
    //The index of the character in the string that is being printed
    var CurrentIndex : Integer = 0;
    
    var TextDelay : Real = 0.0;
    var IsPunctuation : Boolean = false;
    
    //Variables taken from the TextBlockElieInfo
    var SpeakerPicture : SpriteSource = null;
    var SpeakerName : String = "";
    
    [Property]
    var TextBoxPath : CogPath = null;
    var TextBox : Cog = null;
    
    //A higher delay to use after certain punctuation marks
    //[Property]
    var PunctuationDelay : Real = 0.15;
    
    //The standard delay for printing characters
    //[Property]
    var LetterDelay : Real = 0.05;
    
    //The Action Set that controls the delays
    var TextSeq : ActionSet = null;
    //The Action Set to control delay between speaker changes
    var ChangeSeq : ActionSet = null;
    
    var ChangeDelay : Real = 0.5;
    
    function Initialize(init : CogInitializer)
    {
        this.TextBox = this.TextBoxPath.Cog;
        Zero.Connect(this.Owner, "textScrollEvent", this.OntextScrollEvent);
    }

    function OntextScrollEvent(event : TextScrollEvent)
    {
        if(this.TextSeq != null)
        {
            this.TextSeq.Cancel();
        }
        
        this.CurrentIndex = 0;
        this.CurrentString = null;
        this.GoalString = event.TextToWrite.Text;
        
        this.TextSeq = Action.Sequence(this.Owner.Actions);
        
        Actions.Delay(this.TextSeq, this.TextDelay);
        Actions.Call(this.TextSeq, this.TextScroll);
        //this.ParticleScroll(this.CurrentIndex);
    }
    
    function TextScroll()
    {
        if(this.GoalString == this.CurrentString)
        {
            this.TextSeq.Cancel();
            this.ChangeSeq = Action.Sequence(this.Owner.Actions);
            Actions.Delay(this.ChangeSeq, this.ChangeDelay);
            Actions.Call(this.ChangeSeq, this.ContinueEventCall);
            return;
        }
        
        //Console.WriteLine("This is the current string: `this.CurrentString`");
        this.CurrentString = this.GoalString.SubString(0, this.CurrentIndex + 1);
        
        var currentCharacterInt:Integer = this.GoalString.Get(this.CurrentIndex);
        var currentCharacter:String = null;
        
        currentCharacter = String.FromChar(currentCharacterInt);
        
        this.TextDelay = this.LetterDelay;
        
        if(this.IsPunctuation)
        {
            this.TextDelay = this.PunctuationDelay;
            this.IsPunctuation = false;
        }
        if(currentCharacter == "." || currentCharacter == "?" || currentCharacter == "!")
        {
            this.IsPunctuation = true;
        }
        
        this.CurrentIndex += 1;
        
        //this is where the extra screen wrapping code would go
        
        this.Owner.SpriteText.Text = this.CurrentString;
        
        this.TextSeq = Action.Sequence(this.Owner.Actions);
        
        Actions.Delay(this.TextSeq, this.TextDelay);
        Actions.Call(this.TextSeq, this.TextScroll);
        //this.ParticleScroll(this.CurrentIndex);
    }
    
    function ContinueEventCall()
    {
        var e = new ContinueDialogueEvent();
        this.TextBox.DispatchEvent("continueDialogue", e);
    }
    
    //function ParticleScroll(currentCharacterIndex:Integer)
    //{
    //    var particle:Cog = this.Space.FindObjectByName("TextBoxParticle");
        
    //    var currentCharacterPosition:Real3 = this.Owner.SpriteText.GetCharacterPosition(this.CurrentIndex);
    //    Console.WriteLine("Pos: `currentCharacterPosition`");
    //    //currentCharacterPosition = this.Owner.Transform.TransformPoint(currentCharacterPosition);
        
    //    //particle.SpriteParticleSystem.Visible = true;
    //    particle.Transform.Translation = currentCharacterPosition;// = Math.Lerp(particle.Transform.Translation, currentCharacterPosition, 1.0);
    //}
}
    