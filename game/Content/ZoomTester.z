//Written by: Jason Clark
//© 2015 DigiPen, All Rights Reserved.

/////////////////////////////////////////
////                                 ////
////  Name: ZoomTester.z             ////
////    Written by: Jason Clark      ////
////                                 ////
////     Last Updated: 12-11-14      ////
////                                 ////
/////////////////////////////////////////
class ZoomTester : ZilchComponent
{
    [Property]
    var ZoomTargetPath : CogPath = null;
    var ZoomTarget : Cog = null;
    
    var IsPanning : Boolean = false;
    var IsReturnPanning : Boolean = false;
    
    function Initialize(init : CogInitializer)
    {
        this.ZoomTarget = this.ZoomTargetPath.Cog;
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        //Zero.Connect(this.Space, "panFinishedEvent", this.OnPanFinished);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        if(Zero.Keyboard.KeyIsPressed(Keys.H))
        {
            Console.WriteLine("Zooming In");
            Console.WriteLine("Zoom Object in Zoom Tester = `this.ZoomTarget`");
            var zoomEvent = new CameraZoomEvent();
            zoomEvent.IsZoomingIn = true;
            zoomEvent.CameraTarget = this.ZoomTarget;
            zoomEvent.CamSize = 8;
            zoomEvent.ZoomTime = 1.35;
            this.Space.FindObjectByName("Camera").DispatchEvent("zoomEvent", zoomEvent);
            
            //var panEvent = new CameraPanEvent();
            //panEvent.PanTarget = this.ZoomTarget;
            //panEvent.PanTime = 1.35;
            //panEvent.EasingCurve = Ease.Linear;
            //panEvent.IsActive = true;
            //this.Space.FindObjectByName("Camera").DispatchEvent("panEvent", panEvent);
        }
        
        if(Zero.Keyboard.KeyIsPressed(Keys.J))
        {
            var zoomEvent = new CameraZoomEvent();
            zoomEvent.IsZoomingIn = false;
            zoomEvent.CameraTarget = this.ZoomTarget;
            zoomEvent.CamSize = 20;
            zoomEvent.ZoomTime = 1.35;
            this.Space.FindObjectByName("Camera").DispatchEvent("zoomEvent", zoomEvent);
            
            //var panEvent = new CameraPanEvent();
            //panEvent.IsActive = false;
            //panEvent.PanTarget = this.ZoomTarget;
            //panEvent.PanTime = 1.35;
            //panEvent.EasingCurve = Ease.QuadInOut;
            //this.Space.FindObjectByName("Camera").DispatchEvent("panEvent", panEvent);
        }
        
        if(Zero.Keyboard.KeyIsPressed(Keys.K))
        {
            var fadeToBlackEvent = new FadeToBlackEvent();
            fadeToBlackEvent.TimeToFade = 1.5;
            fadeToBlackEvent.EaseCurve = Ease.QuadIn;
            this.Space.FindObjectByName("Camera").DispatchEvent("fadeEvent", fadeToBlackEvent);
        }
        if(Zero.Keyboard.KeyIsPressed(Keys.L))
        {
            var fadeInEvent = new FadeToBlackEvent();
            fadeInEvent.IsFadeIn = true;
            fadeInEvent.TimeToFade = 2.0;
            fadeInEvent.EaseCurve = Ease.QuadIn;
            this.Space.FindObjectByName("Camera").DispatchEvent("fadeEvent", fadeInEvent);
        }
    }
    
    //function OnPan(event : UpdateEvent)
    //{
        //if(Zero.Keyboard.KeyIsPressed(Keys.J))
        //{
        //    this.IsPanning = true;
        //    this.IsReturnPanning = false;
        //}
    //    if(this.IsPanning)
    //    {
            //var panEvent = new CameraPanEvent();
            //panEvent.PanTarget = this.ZoomTarget;
            //panEvent.PanTime = 1.35;
            //panEvent.EasingCurve = Ease.Linear;
            //panEvent.IsActive = true;
            //this.Space.FindObjectByName("Camera").DispatchEvent("panEvent", panEvent);
    //    }
    //    if(Zero.Keyboard.KeyIsPressed(Keys.K))
    //    {
    //        this.IsPanning = false;
    //        this.IsReturnPanning = true;
    //    }
    //    if(this.IsReturnPanning)
    //    {
    //        var panEvent = new CameraPanEvent();
    //        panEvent.PanTarget = this.ZoomTarget;
    //        panEvent.IsActive = false;
    //        panEvent.PanTime = 1.0 * event.Dt;
    //        panEvent.EasingCurve = Ease.QuadInOut;
    //        this.Space.FindObjectByName("Camera").DispatchEvent("panEvent", panEvent);
    //    }
    //}
    
    //function OnPanFinished(event : PanFinishedEvent)
    //{
    //    Console.WriteLine("Pan Finsihed Event Called");
    //    this.IsPanning = false;
    //    this.IsReturnPanning = false;
    //}
}
