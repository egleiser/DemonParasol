/*//////////////////////////////////////////////////////////////////////////////////////////////////////////
//SCRIPT-Z_EnemySlider.z
//AUTHOR-Travis Moore
//COURSE-GAM205
//COPYRIGHT-© 2014 DigiPen, All Rights Reserved.
//////////////////////////////////////////////////////////////////////////////////////////////////////////*/

class Z_EnemySlider:ZilchComponent
{
    //RAYCASTING PROPERTIES
    [Property]
    var RayCastVector:Real3 = Real3(0.0, 1.0, 0.0);    //the local space vector that we use to raycast
    [Property]
    var CastDistance:Real = 10.0;                      //the maximum distance the raycast will go
    [Property]
    var RayColor:Real4 = Real4(1.0, 1.0, 1.0, 1.0);    //color to draw the ray and arrow head
    [Property]
    var ArrowSize:Real = 0.25;                         //size of the arrow head to draw
    [Property]
    var OnTop:Boolean = true;                          //if the ray is always drawn on top of everything
    
    //SLIDE PROPERTIES
    [Property]
    var SlideCompletionTime:Real = 3.0;                //how long it takes to slide across a path
    [Property]
    var SlideReturnTime:Real = 6.0;                    //how long it takes to return back to starting pos
    [Property]
    var SlideDistance:Real = 10.0;
    [Property]
    var SlideDelay:Real = 2.0;
    
    //non-settables
    var EnemyPos:Real3 = Real3();
    var Target:Cog = null;
    var TargetCogPath:CogPath = null;
    var TargetPos:Real3 = Real3();
    var SlideComplete:Boolean = true;
    
    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-Initialize
    //EXPLANATION-Initialize variables/functions so that we can use them
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function Initialize(init : CogInitializer):Void
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        
        //set EnemyPos
        this.EnemyPos = this.Owner.Transform.Translation;
        //set TargetPos if Target is not null
        if(this.TargetCogPath != null)
        {
            this.Target = this.TargetCogPath.Cog;
            this.TargetPos = this.TargetCogPath.Cog.Transform.Translation;
        }
    }
    
    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-OnLogicUpdate
    //EXPLANATION-Update every frame, perform actions of the enemy
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function OnLogicUpdate(event:UpdateEvent):Void
    {
        //create ray
        var ray = Ray();
        ray.Start = this.EnemyPos;
        ray.Direction = this.Owner.Transform.TransformNormal(this.RayCastVector);
        ray.Direction = Math.Normalize(ray.Direction);
        //does enemy have a target?
        if(this.Target != null)
        {
            
        }
        //if we are not already sliding
        if(this.SlideComplete)
        {
            //perform a new slide
            this.AutoSlide();
        }
        
        // Draw to the raycast point
            var endPos = ray.Start + ray.Direction * distance;
            
            this.DrawArrow(ray.Start, endPos);
    }
    
    /*//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FUNCTION-AutoSlide
    //EXPLANATION-Slide in the Direction of the ray casted every x seconds
    //////////////////////////////////////////////////////////////////////////////////////////////////////*/
    function AutoSlide():Void
    {
        //create ray
        var ray = Ray();
        ray.Start = this.EnemyPos;
        ray.Direction = this.Owner.Transform.TransformNormal(this.RayCastVector);
        ray.Direction = Math.Normalize(ray.Direction);
        
        //create action sequence
        var aAutoSlide = Action.Sequence(this.Owner.Actions);
        
        //set bool to false so we can complete slide
        Action.Property(aAutoSlide,
                        @this.SlideComplete,
                        false,
                        0.25,
                        Ease.Linear);
                        
        //slide x distance over x time
        Action.Property(aAutoSlide,
                        @this.Owner.Transform.Translation,
                        this.EnemyPos + (this.RayCastVector * this.SlideDistance),
                        this.SlideCompletionTime,
                        Ease.QuadOut);
        
        //delay actions for x seconds
        Action.Delay(aAutoSlide, this.SlideDelay);
        
        //return back to start position over x time
        Action.Property(aAutoSlide,
                        @this.Owner.Transform.Translation,
                        Real3(-20,-20,0),
                        this.SlideReturnTime,
                        Ease.Linear);
        
        //flip bool to true so we can slide again
        Action.Property(aAutoSlide,
                        @this.SlideComplete,
                        true,
                        0.25,
                        Ease.Linear);
    }
    
    function DrawArrow(start : Real3, end : Real3)
    {
        var line = DebugLine();
        line.Start(start).End(end).HeadSize(this.ArrowSize).Float4Color(this.DrawColor).OnTop(this.OnTop);
        line.Draw();
    }
}
